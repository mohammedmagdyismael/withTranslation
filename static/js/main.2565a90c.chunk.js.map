{"version":3,"sources":["withTranslation/withTranslation.js","store/actions/app.js","App.js","serviceWorker.js","store/reducers/app.js","store/reducers/index.js","store/sagas/app.js","store/sagas/index.js","store/index.js","index.js"],"names":["WrappedComponent","APP","setLanguage","payload","type","withTranslation","connect","dispatch","bindActionCreators","props","localization","style","padding","display","justifyContent","cursor","margin","textAlign","onClick","hello","state","language","app","useState","undefined","setLocalization","useEffect","fetch","then","response","json","locale","catch","Boolean","window","location","hostname","match","initialState","combineReducers","i","test","actionsSaga","console","log","all","takeEvery","rootSaga","sagas","appSaga","map","saga","fork","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2565a90c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const withTranslation = WrappedComponent => {\n  const Localization = props => {\n    const [localization, setLocalization] = useState(undefined);\n    useEffect(() => {\n      const { language } = props;\n      if (language) {\n        fetch(`/withTranslation/localization/${language}/${language}-EG.json`)\n          .then(response => response.json())\n          .then(locale => {\n            setLocalization(locale);\n          })\n          .catch(() => {\n            fetch(`/withTranslation/localization/${language}/${language}-EG.json`)\n              .then(response => response.json())\n              .then(locale => {\n                setLocalization(locale);\n              })\n              .catch(() => {});\n          });\n      }\n    }, [props]);\n\n    return <div>{localization && (<WrappedComponent localization={localization} />)}</div>;\n  };\n\n  const mapStateToProps = state => ({\n    language: state.app.language,\n  });\n\n  return connect(mapStateToProps, null)(Localization);\n};\n","export const APP = {\n  SET_APP_LANGUAGE: 'SET_APP_LANGUAGE',\n};\n\nexport const setLanguage = payload => ({\n  type: APP.SET_APP_LANGUAGE,\n  payload,\n});\n","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { setLanguage } from './store/actions/app'\nimport { withTranslation } from './withTranslation/withTranslation';\nimport './App.css'\n\nconst App = ({ ...props }) => {\n    const { localization } = props;\n    return (\n         <div style={{ padding: '30px' }}>\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <p style={{ cursor: 'pointer', margin: '0px 10px', textAlign: 'center' }} onClick={() => props.setLanguage('ar')}>Arabic</p>\n                <p style={{ cursor: 'pointer', margin: '0px 10px', textAlign: 'center' }} onClick={() => props.setLanguage('en')}>English</p>\n            </div>\n            <div>\n                <p style={{ margin: '30px 10px', textAlign: 'center' }}>\n                    {localization.hello}\n                </p>\n            </div>\n         </div>\n                \n    )\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n        setLanguage,\n    },\n    dispatch,\n  );\n\n  export default withTranslation(connect(null, mapDispatchToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { APP } from '../actions/app';\n\nconst initialState = {\n  language: 'en',\n};\n\nexport default (state = initialState, { type, ...payload }) => {\n  switch (type) {\n    case APP.SET_APP_LANGUAGE:\n      return {\n        ...state,\n        language: payload.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport app from './app';\n\nexport default combineReducers({\n  app,\n});\n","import { takeEvery, all, put } from 'redux-saga/effects';\nimport { APP } from '../actions/app';\n\nfunction* test(payload) {\n  console.log(payload)\n}\n\nexport default function* actionsSaga() {\n  yield all([\n    takeEvery(APP.SET_APP_LANGUAGE, test),\n  ]);\n}\n","import { fork } from 'redux-saga/effects';\nimport appSaga from './app';\n\nconst sagas = [\n  appSaga,\n];\n\nexport default function* rootSaga() {\n  yield sagas.map(saga => fork(saga));\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducers from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // eslint-disable-line\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}